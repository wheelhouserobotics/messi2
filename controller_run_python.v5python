{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\nleft_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 295, 40, MM, 1)\nleftPuem = DigitalOut(brain.three_wire_port.a)\nrightPUEM = DigitalOut(brain.three_wire_port.b)\ncontroller_1 = Controller(PRIMARY)\nintake = Motor(Ports.PORT17, GearSetting.RATIO_6_1, True)\noutake = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\ngps_21 = Gps(Ports.PORT21, 127.00, -50.80, MM, 0)\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nai_vision_2 = AiVision(Ports.PORT2, AiVision.ALL_AIOBJS)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis2 + axis1\n            # right = axis2 - axis1\n            drivetrain_left_side_speed = controller_1.axis2.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis2.position() - controller_1.axis1.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\nai_vision_2_objects = []\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nai_vision_2_index = 0\nmyVariable = 0\n\ndef ondriver_drivercontrol_0():\n    global myVariable, ai_vision_2_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision, ai_vision_2_index\n    pass\n\n# Used to find the format string for printing numbers with the\n# desired number of decimal places\ndef print_to_console_number_format():\n        precision = 0\n        # Equivalent to setting precision to 'All Digits'\n        if vexcode_console_precision is None:\n                precision = 6\n        else:\n                precision = vexcode_console_precision\n\n        return \"{{:.{0}f}}\".format(precision)\ndef when_started1():\n    global myVariable, ai_vision_2_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision, ai_vision_2_index\n    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n    ai_vision_objects[0].id\n    print(ai_vision_2_objects[0].id)\n    print(\"# of objects:\",len(ai_vision_objects))\n    if (len(ai_vision_objects) > 0):\n        for index in range (0,len(ai_vision_objects)):\n            print(ai_vision_objects)\n\n\n# print(print_to_console_number_format().format(len(ai_vision_2_objects) if ai_vision_2_objects else 0))\n   # ai_vision_2_index = 1 - 1\n    #print(print_to_console_number_format().format(ai_vision_2_objects[ai_vision_2_index].width))\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# when_started1()\n\n\nai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n# ai_vision_objects[0].id\n# print(ai_vision_2_objects[0].id)\nprint(\"# of objects:\",len(ai_vision_objects))\n\n\nif (len(ai_vision_objects) > 0):\n\n\n    for index in range (0,len(ai_vision_objects)):\n        #print(ai_vision_objects[index].id)\n        if(ai_vision_objects[index].id==0):\n            print(\"stake:\")   \n            if (ai_vision_objects[index].centerX > 150 and 170 > ai_vision_objects[index].centerX):\n                print(\"center\")\n                drivetrain.drive(FORWARD)\n            elif (ai_vision_objects[index].centerX < 150):\n                print(\"left\")\n                drivetrain.set_turn_velocity(10, PERCENT)\n                drivetrain.turn(LEFT)\n                while True:\n                    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n                    print(\"ring:\", ai_vision_objects[index].centerX)\n                    if (ai_vision_objects[index].centerX > 190 and 200 > ai_vision_objects[index].centerX):\n                        drivetrain.stop()\n                        break \n                print(ai_vision_objects[index].centerX) \n            elif (ai_vision_objects[index].centerX > 170):\n                print(\"right\")\n                drivetrain.set_turn_velocity(10, PERCENT)\n                drivetrain.set_drive_velocity(10, PERCENT)\n\n                intake.set_velocity(50, PERCENT)\n\n                drivetrain.turn(RIGHT)\n                while True:\n                    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n                    print(\"ring:\", ai_vision_objects[index].centerX)\n                    if (ai_vision_objects[index].centerX > 190 and 200 > ai_vision_objects[index].centerX):\n                        drivetrain.stop()\n                        break  \n                print(ai_vision_objects[index].centerX)\n\n        elif(ai_vision_objects[index].id==1):\n            print(\"red ring:\")\n            if (ai_vision_objects[index].centerX > 150 and 170 > ai_vision_objects[index].centerX):\n                print(\"center\")\n            elif (ai_vision_objects[index].centerX < 150):\n                print(\"left\")\n                drivetrain.set_turn_velocity(10, PERCENT)\n                drivetrain.set_drive_velocity(10, PERCENT)\n                intake.set_velocity(50, PERCENT)\n\n                drivetrain.turn(LEFT)\n                while True:\n                    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n                    print(\"ring:\", ai_vision_objects[index].centerX)\n                    if (ai_vision_objects[index].centerX > 190 and 200 > ai_vision_objects[index].centerX):\n                        drivetrain.stop()\n                        break\n                print(ai_vision_objects[index].centerX)  \n                intake.spin(FORWARD)\n                drivetrain.drive(FORWARD)\n\n            elif (ai_vision_objects[index].centerX > 170):\n                print(\"right\")\n                drivetrain.set_turn_velocity(10, PERCENT)\n                drivetrain.set_drive_velocity(50, PERCENT)\n                intake.set_velocity(50, PERCENT)\n                drivetrain.turn(RIGHT)\n                while True:\n                    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n                    print(\"ring:\", ai_vision_objects[index].centerX)\n                    if (ai_vision_objects[index].centerX > 190 and 200 > ai_vision_objects[index].centerX):\n                        drivetrain.stop()\n                        break\n                print(ai_vision_objects[index].centerX)\n                intake.spin(FORWARD)\n                drivetrain.drive(FORWARD)\n\n\n\n                \n        elif(ai_vision_objects[index].id==2):\n            print(\"blue ring:\")\n            if (ai_vision_objects[index].centerX > 150 and 170 > ai_vision_objects[index].centerX):\n                print(\"center\")\n            elif (ai_vision_objects[index].centerX < 150):\n                print(\"left\")\n                drivetrain.set_turn_velocity(10, PERCENT)\n                drivetrain.set_drive_velocity(10, PERCENT)\n                intake.set_velocity(50, PERCENT)\n\n                drivetrain.turn(LEFT)\n                while True:\n                    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n                    print(\"ring:\", ai_vision_objects[index].centerX)\n                    if (ai_vision_objects[index].centerX > 190 and 200 > ai_vision_objects[index].centerX):\n                        drivetrain.stop()\n                        break  \n            elif (ai_vision_objects[index].centerX > 170):\n                print(\"right\")\n                drivetrain.set_turn_velocity(10, PERCENT)\n                drivetrain.set_drive_velocity(10, PERCENT)\n                intake.set_velocity(50, PERCENT)\n\n                drivetrain.turn(RIGHT)\n                while True:\n                    ai_vision_objects = ai_vision_2.take_snapshot(AiVision.ALL_AIOBJS)\n                    print(\"ring:\", ai_vision_objects[index].centerX)\n                    if (ai_vision_objects[index].centerX > 190 and 200 > ai_vision_objects[index].centerX):\n                        drivetrain.stop()\n                        break\n\n    \n\n# Check if the object isn't in the center of the AI Vision Sensor's view.\nif ai_vision_objects[0].centerX > 150 and 170 > ai_vision_objects[0].centerX:\n# Keep turning right until the object is in the center of the view.\n    drivetrain.drive(FORWARD)\nelse:\n    drivetrain.stop()\n#wait(5, MSEC)\n","textLanguage":"python","robotConfig":[{"port":[20,11,12,16,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel275in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"leftPuem","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[2],"name":"rightPUEM","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcader","id":"primary"},"triportSourcePort":22},{"port":[17],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"outake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[21],"name":"gps_21","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"5","xOffsetUnit":"in","yOffset":"-2","yOffsetUnit":"in","thetaOffset":"0"},"triportSourcePort":22},{"port":[2],"name":"ai_vision_2","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":16,\"version\":1,\"name\":\"2024-2025 High Stakes\"},\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}